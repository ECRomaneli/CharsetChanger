"use strict";async function charsetChanger(t){return charsetChanger.instance.setConfig(t).convert()}function charsetChangerSync(t){charsetChanger.instance.setConfig(t).convertSync()}var Charset;Object.defineProperty(exports,"__esModule",{value:!0}),exports.charsetChanger=charsetChanger,exports.charsetChangerSync=charsetChangerSync,function(t){t.UCS2="ucs2",t.UTF7="UTF-7",t.UTF7_IMAP="UTF-7-IMAP",t.UTF16="UTF16",t.UTF32="UTF32",t.ASCII="ascii",t.BINARY="binary",t.BASE64="base64",t.HEX="hex",t.WIN1252="windows-1252",t.CP1252="windows-1252",t.LATIN1="ISO-8859-1",t.UTF8="UTF-8",t.UTF16_LE="UTF-16 LE",t.UTF16_BE="UTF-16 BE",t.UTF32_LE="UTF-32 LE",t.UTF32_BE="UTF-32 BE",t.ISO2022_JP="ISO-2022-JP",t.ISO2022_KR="ISO-2022-KR",t.ISO2022_CN="ISO-2022-CN",t.SHIFT_JIS="Shift-JIS",t.BIG5="Big5",t.EUC_JP="EUC-JP",t.EUC_KR="EUC-KR",t.GB18030="GB18030",t.ISO8859_1="ISO-8859-1",t.ISO8859_2="ISO-8859-2",t.ISO8859_5="ISO-8859-5",t.ISO8859_6="ISO-8859-6",t.ISO8859_7="ISO-8859-7",t.ISO8859_8="ISO-8859-8",t.ISO8859_9="ISO-8859-9",t.WINDOWS_1250="windows-1250",t.WINDOWS_1251="windows-1251",t.WINDOWS_1252="windows-1252",t.WINDOWS_1253="windows-1253",t.WINDOWS_1254="windows-1254",t.WINDOWS_1255="windows-1255",t.WINDOWS_1256="windows-1256",t.KOI8_R="KOI8-R"}(Charset=exports.Charset||(exports.Charset={})),function(t){const e=require("fs"),{glob:s}=require("glob"),i=require("chardet"),r=require("iconv-lite"),o=".bkp",n=()=>{},h=2e5;class a{constructor(){this.Debug={log:t=>this._debug&&_("log",t),info:t=>this._debug&&_("info",t),warn:t=>this._debug&&_("warn",t),err:(t,e)=>this._debug&&_("error",t,!1!==e)},this._messageList=[]}tryConvert(t){try{t(),this._onFinish(!0,this._messageList)}catch(t){this._onFinish(!1,this._messageList),this.Debug.err(t)}}addMessage(t,e,s){if(this.Debug.info(e),this._messageList.push({file:t,message:e}),s)throw e}rootPath(t){return this._root+t}detectCharset(t,e){let s=i.detect(e,{sampleSize:h});if(null===s)this.addMessage(t,c(t,"Charset not detected"));else if(r.encodingExists(s))if(s===this._to)this.addMessage(t,c(t,`The file is already ${s}`));else{if(!g(this._detectorFilter(t,s)))return s;this.addMessage(t,c(t,`Charset detected: ${s}`))}else this.addMessage(t,d(s));return null}getDecodedData(t){this.Debug.log("Getting decoded data...");let s=e.readFileSync(this.rootPath(t)),i=this._from||this.detectCharset(t,s);return this.Debug.info(`Charset: ${i};`),i?r.decode(s,i):null}setEncodedData(t,s){this.Debug.log("Setting encoded data..."),this.Debug.info(`Charset: ${this._to};`),e.writeFileSync(this.rootPath(t),r.encode(s,this._to))}createBackup(t){this._createBackup&&(this.Debug.log("Creating backup..."),this.Debug.info(`Backup suffix: ${this.backupSuffix}`),t=this.rootPath(t),e.copyFileSync(t,t+this.backupSuffix))}listFiles(){this.Debug.log("Listing files...");let t=s.sync(this._search,{cwd:this._root,ignore:this._ignore,nodir:!0});return this.Debug.info(t),g(this._onList(t))&&this.addMessage(null,u("onList"),!0),t}changeCharset(t,e,s){let i=this.getDecodedData(t);if(null!==i){if(g(this._onBeforeConvert(t,i,e,s)))return this.addMessage(t,u("onBeforeConvert"));this.createBackup(t),this.setEncodedData(t,i),g(this._onAfterConvert(t,i,e,s))&&this.addMessage(t,u("onBeforeConvert"),!0)}}startConvert(){this.tryConvert(()=>{this.Debug.log("Try converting..."),this.listFiles().forEach((t,e,s)=>this.changeCharset(t,e,s)),this.Debug.log("Finished.")})}async convert(){setTimeout(()=>this.startConvert(),0)}convertSync(){this.startConvert()}root(t){return void 0===t?this._root:(this._root="/"!==t.charAt(t.length-1)?t+"/":t,this)}search(t){return void 0===t?this._search:(this._search=t,this)}ignore(t){return void 0===t?this._ignore:(this._ignore=t,this)}from(t){if(void 0===t)return this._from;if(null!==t&&!r.encodingExists(t))throw d(t);return this._from=t,this}to(t){if(void 0===t)return this._to;if(!r.encodingExists(t))throw d(t);return this._to=t,this}backup(t,e){return void 0===t&&void 0===e?this.backupSuffix:"boolean"==typeof t?this.backup(void 0,t):(this._createBackup=void 0===e||e,this.backupSuffix=void 0!==t?t:o,this)}debug(t){return void 0===t?this._debug:(this._debug=t,this)}onList(t){return this._onList=t,this}onBeforeConvert(t){return this._onBeforeConvert=t,this}onAfterConvert(t){return this._onAfterConvert=t,this}onFinish(t){return this._onFinish=t,this}detectorFilter(t){return this._detectorFilter=t,this}setConfig(t){return this.root(t.root||null).search(t.search||"**/*").ignore(t.ignore||null).from(t.from||null).to(t.to||null).backup(t.backupSuffix,t.createBackup||!!t.backupSuffix).onList(t.onList||n).onBeforeConvert(t.onBeforeConvert||n).onAfterConvert(t.onAfterConvert||n).onFinish(t.onFinish||n).detectorFilter(t.detectorFilter||n).debug(t.debug||!1)}}t.Class=a,t.instance=new a;const c=(t,e)=>`Skipping "${t}" conversion. ${e}.`,u=t=>`The ${t} listener returned false.`,d=t=>`Encoding ${t} is not supported!`,g=t=>!1===t;function _(t,e,s){if(s&&"error"===t)throw`[CharsetChanger] ${e}`;console[t](`[CharsetChanger] ${t.toUpperCase()} `,e)}}(charsetChanger=exports.charsetChanger||(exports.charsetChanger={})),exports.Class=charsetChanger.Class,exports.CharsetChanger=exports.Class;